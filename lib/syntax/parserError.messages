prog: VAR
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

[E000]Invalid program.

prog: WHILE VAR
##
## Ends in an error in state: 1.
##
## expr -> WHILE . expr DO expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## WHILE
##

[E001]Expecting an expression followed by DO

prog: MINUS VAR
##
## Ends in an error in state: 4.
##
## arith -> MINUS . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

[E002]Expecting expression

prog: LPAREN VAR
##
## Ends in an error in state: 5.
##
## expr -> LPAREN . RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## expr -> LPAREN . exprs RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

[E003]Expecting expressions or RPAREN

prog: LET WHILE
##
## Ends in an error in state: 8.
##
## decs -> decs . tydec [ VAR TYPE IN FUNCTION ]
## decs -> decs . vardec [ VAR TYPE IN FUNCTION ]
## decs -> decs . fundec [ VAR TYPE IN FUNCTION ]
## letexp -> LET decs . IN exprs END [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LET decs
##

[E004]Expecting definition

prog: LET VAR WHILE
##
## Ends in an error in state: 9.
##
## vardec -> VAR . ID ASSIGN expr [ VAR TYPE IN FUNCTION ]
## vardec -> VAR . ID COLON ID ASSIGN expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR
##

[E005]Expecting a symbol followed by definition

prog: LET VAR ID WHILE
##
## Ends in an error in state: 10.
##
## vardec -> VAR ID . ASSIGN expr [ VAR TYPE IN FUNCTION ]
## vardec -> VAR ID . COLON ID ASSIGN expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID
##

[E006]Expecting definition

prog: LET VAR ID COLON WHILE
##
## Ends in an error in state: 11.
##
## vardec -> VAR ID COLON . ID ASSIGN expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID COLON
##

[E007]Unexpected COLON, expecting definition

prog: LET VAR ID COLON ID WHILE
##
## Ends in an error in state: 12.
##
## vardec -> VAR ID COLON ID . ASSIGN expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID COLON ID
##

[E008]Expecting definition

prog: LET VAR ID COLON ID ASSIGN VAR
##
## Ends in an error in state: 13.
##
## vardec -> VAR ID COLON ID ASSIGN . expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID COLON ID ASSIGN
##

[E009]Expecting definition

prog: IF VAR
##
## Ends in an error in state: 15.
##
## ite -> IF . expr THEN expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## ite -> IF . expr THEN expr ELSE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF
##

[E010]Expecting expression

prog: ID WHILE
##
## Ends in an error in state: 16.
##
## funcall -> ID . LPAREN RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## funcall -> ID . LPAREN exprc RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## funcall -> ID . nonempty_list(ID) [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## instOfArr -> ID . LBRACE expr RBRACE OF expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## instOfRec -> ID . LBRACK tdefs RBRACK [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## lvalue -> ID . lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## ID
##

[E011]Unexpected token

prog: ID LPAREN VAR
##
## Ends in an error in state: 17.
##
## funcall -> ID LPAREN . RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## funcall -> ID LPAREN . exprc RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

[E012]Unclosed LPAREN

prog: FOR WHILE
##
## Ends in an error in state: 19.
##
## expr -> FOR . ID ASSIGN expr TO expr DO expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR
##

[E013]Expecting ID

prog: FOR ID WHILE
##
## Ends in an error in state: 20.
##
## expr -> FOR ID . ASSIGN expr TO expr DO expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID
##

[E014]Expecting ASSIGN

prog: FOR ID ASSIGN VAR
##
## Ends in an error in state: 21.
##
## expr -> FOR ID ASSIGN . expr TO expr DO expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID ASSIGN
##

[E015]Expecting expression

prog: ID ASSIGN VAR
##
## Ends in an error in state: 24.
##
## assignment -> lvalue ASSIGN . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## lvalue ASSIGN
##

[E016]Expecting expression

prog: ID ASSIGN INT WHILE
##
## Ends in an error in state: 30.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## assignment -> lvalue ASSIGN expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## lvalue ASSIGN expr
##

[E017]Unexpected token

prog: INT TIMES VAR
##
## Ends in an error in state: 31.
##
## arith -> expr TIMES . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

[E018]Expecting expression

prog: INT PLUS VAR
##
## Ends in an error in state: 36.
##
## arith -> expr PLUS . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

[E019]Expecting expression

prog: INT PLUS INT WHILE
##
## Ends in an error in state: 37.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr PLUS expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

[E020]Unexpected token

prog: INT DIVIDE VAR
##
## Ends in an error in state: 38.
##
## arith -> expr DIVIDE . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr DIVIDE
##

[E021]Expecting expression

prog: INT OR VAR
##
## Ends in an error in state: 40.
##
## compare -> expr OR . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR
##

[E022]Expecting expression

prog: INT OR INT WHILE
##
## Ends in an error in state: 41.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr OR expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr OR expr
##

[E023]Unexpected token

prog: INT NEQ VAR
##
## Ends in an error in state: 42.
##
## compare -> expr NEQ . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr NEQ
##

[E024]Expecting expression

prog: INT NEQ INT WHILE
##
## Ends in an error in state: 43.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr NEQ expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr NEQ expr
##

[E025]Unexpected token

prog: INT MINUS VAR
##
## Ends in an error in state: 44.
##
## arith -> expr MINUS . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

[E026]Expecting expression

prog: INT MINUS INT WHILE
##
## Ends in an error in state: 45.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr MINUS expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

[E027]Unexpected token

prog: INT LT VAR
##
## Ends in an error in state: 46.
##
## compare -> expr LT . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LT
##

[E028]Expecting expression

prog: INT LT INT WHILE
##
## Ends in an error in state: 47.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr LT expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

[E029]Unexpected token

prog: INT LE VAR
##
## Ends in an error in state: 48.
##
## compare -> expr LE . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LE
##

[E030]Expecting expression

prog: INT LE INT WHILE
##
## Ends in an error in state: 49.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr LE expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr LE expr
##

[E031]Unexpected token

prog: INT GT VAR
##
## Ends in an error in state: 50.
##
## compare -> expr GT . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GT
##

[E032]Expecting expression

prog: INT GT INT WHILE
##
## Ends in an error in state: 51.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr GT expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

[E033]Unexpected token

prog: INT GE VAR
##
## Ends in an error in state: 52.
##
## compare -> expr GE . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GE
##

[E034]Expecting expression

prog: INT GE INT WHILE
##
## Ends in an error in state: 53.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr GE expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr GE expr
##

[E035]Unexpected token

prog: INT EQ VAR
##
## Ends in an error in state: 54.
##
## compare -> expr EQ . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr EQ
##

[E036]Expecting expression

prog: INT EQ INT WHILE
##
## Ends in an error in state: 55.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr EQ expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr EQ expr
##

[E037]Unexpected token

prog: INT AND VAR
##
## Ends in an error in state: 56.
##
## compare -> expr AND . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND
##

[E038]Expecting expression

prog: INT AND INT WHILE
##
## Ends in an error in state: 57.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr AND expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## expr AND expr
##

[E039]Unexpected token

prog: FOR ID ASSIGN INT VAR
##
## Ends in an error in state: 58.
##
## arith -> expr . PLUS expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . MINUS expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . TIMES expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . EQ expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . NEQ expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . GT expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . LT expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . GE expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . LE expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . AND expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . OR expr [ TO TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## expr -> FOR ID ASSIGN expr . TO expr DO expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID ASSIGN expr
##

[E040]Expecting TO

prog: FOR ID ASSIGN INT TO VAR
##
## Ends in an error in state: 59.
##
## expr -> FOR ID ASSIGN expr TO . expr DO expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID ASSIGN expr TO
##

[E041]Unexpected token, expecting expression

prog: FOR ID ASSIGN INT TO INT VAR
##
## Ends in an error in state: 60.
##
## arith -> expr . PLUS expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## arith -> expr . MINUS expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## arith -> expr . TIMES expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . EQ expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . NEQ expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . GT expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . LT expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . GE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . LE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . AND expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . OR expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## expr -> FOR ID ASSIGN expr TO expr . DO expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID ASSIGN expr TO expr
##

[E042]Unexpected token, expecting DO

prog: FOR ID ASSIGN INT TO INT DO VAR
##
## Ends in an error in state: 61.
##
## expr -> FOR ID ASSIGN expr TO expr DO . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID ASSIGN expr TO expr DO
##

[E043]Unexpected token, expecting expression

prog: FOR ID ASSIGN INT TO INT DO INT WHILE
##
## Ends in an error in state: 62.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## expr -> FOR ID ASSIGN expr TO expr DO expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## FOR ID ASSIGN expr TO expr DO expr
##

[E044]Unexpected token

prog: ID LPAREN INT COMMA VAR
##
## Ends in an error in state: 65.
##
## exprc -> exprc COMMA . expr [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## exprc COMMA
##

[E045]Expecting expression

prog: ID LPAREN INT COMMA INT VAR
##
## Ends in an error in state: 66.
##
## arith -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . GE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . LE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## exprc -> exprc COMMA expr . [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## exprc COMMA expr
##

[E046]Unclosed LPAREN

prog: ID LPAREN INT VAR
##
## Ends in an error in state: 67.
##
## arith -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . GE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . LE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## exprc -> expr . [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##

[E047]Unexpected token

prog: ID LBRACK WHILE
##
## Ends in an error in state: 68.
##
## instOfRec -> ID LBRACK . tdefs RBRACK [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID LBRACK
##

[E048]Unexpected token, expecting definitions

prog: ID LBRACK ID WHILE
##
## Ends in an error in state: 69.
##
## tdefs -> ID . EQ expr [ RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

[E049]Expecting definitions

prog: ID LBRACK ID EQ VAR
##
## Ends in an error in state: 70.
##
## tdefs -> ID EQ . expr [ RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## ID EQ
##

[E050]Expecting definitions

prog: ID LBRACK ID EQ INT VAR
##
## Ends in an error in state: 71.
##
## arith -> expr . PLUS expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . GT expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . LT expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . GE expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . LE expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . AND expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . OR expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## tdefs -> ID EQ expr . [ RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## ID EQ expr
##

[E051]Unexpected token

prog: ID LBRACK COMMA WHILE
##
## Ends in an error in state: 74.
##
## tdefs -> tdefs COMMA . ID EQ expr [ RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## tdefs COMMA
##

[E052]Unexpected token, expecting ID

prog: ID LBRACK COMMA ID WHILE
##
## Ends in an error in state: 75.
##
## tdefs -> tdefs COMMA ID . EQ expr [ RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## tdefs COMMA ID
##

[E053]Expecting EQ

prog: ID LBRACK COMMA ID EQ VAR
##
## Ends in an error in state: 76.
##
## tdefs -> tdefs COMMA ID EQ . expr [ RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## tdefs COMMA ID EQ
##

[E054]Unexpected token, expecting expression

prog: ID LBRACK COMMA ID EQ INT VAR
##
## Ends in an error in state: 77.
##
## arith -> expr . PLUS expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . GT expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . LT expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . GE expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . LE expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . AND expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## compare -> expr . OR expr [ TIMES RBRACK PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE COMMA AND ]
## tdefs -> tdefs COMMA ID EQ expr . [ RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## tdefs COMMA ID EQ expr
##

[E055]Unexpected token, expecting COMMA or RBRACK

prog: ID LBRACE VAR
##
## Ends in an error in state: 78.
##
## instOfArr -> ID LBRACE . expr RBRACE OF expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## lvalue_ -> LBRACE . expr RBRACE lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## ID LBRACE
##

[E056]Expecting expression

prog: ID LBRACE INT VAR
##
## Ends in an error in state: 79.
##
## arith -> expr . PLUS expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . MINUS expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . TIMES expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . EQ expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . NEQ expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . GT expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . LT expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . GE expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . LE expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . AND expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . OR expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## instOfArr -> ID LBRACE expr . RBRACE OF expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## lvalue_ -> LBRACE expr . RBRACE lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## ID LBRACE expr
##

[E057]Unexpected token, expecting RBRACE

prog: ID LBRACE INT RBRACE WHILE
##
## Ends in an error in state: 80.
##
## instOfArr -> ID LBRACE expr RBRACE . OF expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## lvalue_ -> LBRACE expr RBRACE . lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## ID LBRACE expr RBRACE
##

[E058]Unexpected token, expecting OF

prog: ID LBRACE INT RBRACE OF VAR
##
## Ends in an error in state: 81.
##
## instOfArr -> ID LBRACE expr RBRACE OF . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID LBRACE expr RBRACE OF
##

[E059]Unexpected token, expecting expression

prog: ID LBRACE INT RBRACE OF INT WHILE
##
## Ends in an error in state: 82.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## instOfArr -> ID LBRACE expr RBRACE OF expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID LBRACE expr RBRACE OF expr
##

[E060]Unexpected token

prog: ID DOT ID LBRACE VAR
##
## Ends in an error in state: 83.
##
## lvalue_ -> LBRACE . expr RBRACE lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

[E061]Expecting expression

prog: ID DOT ID LBRACE INT VAR
##
## Ends in an error in state: 84.
##
## arith -> expr . PLUS expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . MINUS expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . TIMES expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . EQ expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . NEQ expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . GT expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . LT expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . GE expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . LE expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . AND expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . OR expr [ TIMES RBRACE PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## lvalue_ -> LBRACE expr . RBRACE lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##

[E062]Unclosed LBRACE

prog: ID DOT ID LBRACE INT RBRACE WHILE
##
## Ends in an error in state: 85.
##
## lvalue_ -> LBRACE expr RBRACE . lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## LBRACE expr RBRACE
##

[E063]Unexpected token

prog: ID DOT WHILE
##
## Ends in an error in state: 86.
##
## lvalue_ -> DOT . ID lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## DOT
##

[E064]Unexpected token, expecting ID

prog: ID DOT ID WHILE
##
## Ends in an error in state: 87.
##
## lvalue_ -> DOT ID . lvalue_ [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA ASSIGN AND ]
##
## The known suffix of the stack is as follows:
## DOT ID
##

[E065]Unexpected token

prog: IF INT VAR
##
## Ends in an error in state: 94.
##
## arith -> expr . PLUS expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . MINUS expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . TIMES expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . EQ expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . NEQ expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . GT expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . LT expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . GE expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . LE expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . AND expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## compare -> expr . OR expr [ TIMES THEN PLUS OR NEQ MINUS LT LE GT GE EQ DIVIDE AND ]
## ite -> IF expr . THEN expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## ite -> IF expr . THEN expr ELSE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF expr
##

[E066]Unexpected token

prog: ID ID WHILE
##
## Ends in an error in state: 90.
##
## nonempty_list(ID) -> ID . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## nonempty_list(ID) -> ID . nonempty_list(ID) [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## ID
##

[E067]Unexpected token

prog: IF INT THEN VAR
##
## Ends in an error in state: 95.
##
## ite -> IF expr THEN . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## ite -> IF expr THEN . expr ELSE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

[E068]Unexpected token, expecting expression

prog: IF INT THEN INT WHILE
##
## Ends in an error in state: 96.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## ite -> IF expr THEN expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## ite -> IF expr THEN expr . ELSE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

[E069]Unexpected token

prog: IF INT THEN INT ELSE VAR
##
## Ends in an error in state: 97.
##
## ite -> IF expr THEN expr ELSE . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

[E070]Unexpected token, expecting expression

prog: IF INT THEN INT ELSE INT WHILE
##
## Ends in an error in state: 98.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## ite -> IF expr THEN expr ELSE expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

[E071]Unexpected token

prog: LET VAR ID COLON ID ASSIGN INT TO
##
## Ends in an error in state: 99.
##
## arith -> expr . PLUS expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . MINUS expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . TIMES expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . EQ expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . NEQ expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . GT expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . LT expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . GE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . LE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . AND expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . OR expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## vardec -> VAR ID COLON ID ASSIGN expr . [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID COLON ID ASSIGN expr
##

[E072]Unexpected token

prog: LET VAR ID ASSIGN VAR
##
## Ends in an error in state: 100.
##
## vardec -> VAR ID ASSIGN . expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID ASSIGN
##

[E073]Unexpected token, expecting expression

prog: LET VAR ID ASSIGN INT TO
##
## Ends in an error in state: 101.
##
## arith -> expr . PLUS expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . MINUS expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . TIMES expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . EQ expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . NEQ expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . GT expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . LT expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . GE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . LE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . AND expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . OR expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## vardec -> VAR ID ASSIGN expr . [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## VAR ID ASSIGN expr
##

[E074]Unexpected token

prog: LET TYPE WHILE
##
## Ends in an error in state: 102.
##
## tydec -> TYPE . ID EQ ID [ VAR TYPE IN FUNCTION ]
## tydec -> TYPE . ID EQ LBRACK tyfields RBRACK [ VAR TYPE IN FUNCTION ]
## tydec -> TYPE . ID EQ ARRAY OF ID [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## TYPE
##

[E075]Unexpected token, expecting TYPE-ID

prog: LET TYPE ID WHILE
##
## Ends in an error in state: 103.
##
## tydec -> TYPE ID . EQ ID [ VAR TYPE IN FUNCTION ]
## tydec -> TYPE ID . EQ LBRACK tyfields RBRACK [ VAR TYPE IN FUNCTION ]
## tydec -> TYPE ID . EQ ARRAY OF ID [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## TYPE ID
##

[E076]Unexpected token after '$0', expecting EQ

prog: LET TYPE ID EQ WHILE
##
## Ends in an error in state: 104.
##
## tydec -> TYPE ID EQ . ID [ VAR TYPE IN FUNCTION ]
## tydec -> TYPE ID EQ . LBRACK tyfields RBRACK [ VAR TYPE IN FUNCTION ]
## tydec -> TYPE ID EQ . ARRAY OF ID [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## TYPE ID EQ
##

[E077]Unexpected token, expecting type definition

prog: LET TYPE ID EQ LBRACK WHILE
##
## Ends in an error in state: 105.
##
## tydec -> TYPE ID EQ LBRACK . tyfields RBRACK [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## TYPE ID EQ LBRACK
##

[E078]Unexpected token, expecting record definition

prog: LET FUNCTION ID LPAREN ID WHILE
##
## Ends in an error in state: 106.
##
## tyfields -> ID . COLON ID [ RPAREN RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

[E079]Unexpected token, expecting COLON

prog: LET FUNCTION ID LPAREN ID COLON WHILE
##
## Ends in an error in state: 107.
##
## tyfields -> ID COLON . ID [ RPAREN RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

[E080]Unexpected token, expecting ID

prog: LET TYPE ID EQ LBRACK ID COLON ID WHILE
##
## Ends in an error in state: 109.
##
## tydec -> TYPE ID EQ LBRACK tyfields . RBRACK [ VAR TYPE IN FUNCTION ]
## tyfields -> tyfields . COMMA ID COLON ID [ RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## TYPE ID EQ LBRACK tyfields
##

[E081]Unclosed RBRACK

prog: LET FUNCTION ID LPAREN COMMA WHILE
##
## Ends in an error in state: 111.
##
## tyfields -> tyfields COMMA . ID COLON ID [ RPAREN RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## tyfields COMMA
##

[E082]Expecting definitions

prog: LET FUNCTION ID LPAREN COMMA ID WHILE
##
## Ends in an error in state: 112.
##
## tyfields -> tyfields COMMA ID . COLON ID [ RPAREN RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## tyfields COMMA ID
##

[E083]Expecting COLON

prog: LET FUNCTION ID LPAREN COMMA ID COLON WHILE
##
## Ends in an error in state: 113.
##
## tyfields -> tyfields COMMA ID COLON . ID [ RPAREN RBRACK COMMA ]
##
## The known suffix of the stack is as follows:
## tyfields COMMA ID COLON
##

[E084]Expecting TYPE-ID

prog: LET TYPE ID EQ ARRAY WHILE
##
## Ends in an error in state: 116.
##
## tydec -> TYPE ID EQ ARRAY . OF ID [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## TYPE ID EQ ARRAY
##

[E085]Unexpected token, Expecting OF

prog: LET TYPE ID EQ ARRAY OF WHILE
##
## Ends in an error in state: 117.
##
## tydec -> TYPE ID EQ ARRAY OF . ID [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## TYPE ID EQ ARRAY OF
##

[E086]Unexpected token, Expecting ID

prog: LET IN VAR
##
## Ends in an error in state: 119.
##
## letexp -> LET decs IN . exprs END [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LET decs IN
##

[E087]Expecting expression

prog: LET IN INT RPAREN
##
## Ends in an error in state: 120.
##
## exprs -> exprs . SEMICOLON expr [ SEMICOLON END ]
## letexp -> LET decs IN exprs . END [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## LET decs IN exprs
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 124, spurious reduction of production exprs -> expr
##

[E088]Unexpected token

prog: LPAREN INT SEMICOLON VAR
##
## Ends in an error in state: 121.
##
## exprs -> exprs SEMICOLON . expr [ SEMICOLON RPAREN END ]
##
## The known suffix of the stack is as follows:
## exprs SEMICOLON
##

[E089]Expecting expression

prog: LPAREN INT SEMICOLON INT VAR
##
## Ends in an error in state: 122.
##
## arith -> expr . PLUS expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## arith -> expr . MINUS expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## arith -> expr . TIMES expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . EQ expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . NEQ expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . GT expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . LT expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . GE expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . LE expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . AND expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . OR expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## exprs -> exprs SEMICOLON expr . [ SEMICOLON RPAREN END ]
##
## The known suffix of the stack is as follows:
## exprs SEMICOLON expr
##

[E090]Unexpected token

prog: LPAREN INT VAR
##
## Ends in an error in state: 124.
##
## arith -> expr . PLUS expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## arith -> expr . MINUS expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## arith -> expr . TIMES expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . EQ expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . NEQ expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . GT expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . LT expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . GE expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . LE expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . AND expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## compare -> expr . OR expr [ TIMES SEMICOLON RPAREN PLUS OR NEQ MINUS LT LE GT GE EQ END DIVIDE AND ]
## exprs -> expr . [ SEMICOLON RPAREN END ]
##
## The known suffix of the stack is as follows:
## expr
##

[E091]Unexpected token

prog: LET FUNCTION WHILE
##
## Ends in an error in state: 125.
##
## fundec -> FUNCTION . ID LPAREN tyfields RPAREN EQ expr [ VAR TYPE IN FUNCTION ]
## fundec -> FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

[E092]Unexpected token, expecting function definition

prog: LET FUNCTION ID WHILE
##
## Ends in an error in state: 126.
##
## fundec -> FUNCTION ID . LPAREN tyfields RPAREN EQ expr [ VAR TYPE IN FUNCTION ]
## fundec -> FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID
##

[E093]Unexpected token, expecting argument definition

prog: LET FUNCTION ID LPAREN WHILE
##
## Ends in an error in state: 127.
##
## fundec -> FUNCTION ID LPAREN . tyfields RPAREN EQ expr [ VAR TYPE IN FUNCTION ]
## fundec -> FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN
##

[E094]Unexpected token, expecting argument definition or RPAREN

prog: LET FUNCTION ID LPAREN ID COLON ID WHILE
##
## Ends in an error in state: 128.
##
## fundec -> FUNCTION ID LPAREN tyfields . RPAREN EQ expr [ VAR TYPE IN FUNCTION ]
## fundec -> FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ expr [ VAR TYPE IN FUNCTION ]
## tyfields -> tyfields . COMMA ID COLON ID [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN tyfields
##

[E095]kUnclosed RPAREN

prog: LET FUNCTION ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 129.
##
## fundec -> FUNCTION ID LPAREN tyfields RPAREN . EQ expr [ VAR TYPE IN FUNCTION ]
## fundec -> FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN tyfields RPAREN
##

[E096]Unexpected token

prog: LET FUNCTION ID LPAREN RPAREN EQ VAR
##
## Ends in an error in state: 130.
##
## fundec -> FUNCTION ID LPAREN tyfields RPAREN EQ . expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN tyfields RPAREN EQ
##

[E097]Unexpected token, expecting function body

prog: LET FUNCTION ID LPAREN RPAREN EQ INT TO
##
## Ends in an error in state: 131.
##
## arith -> expr . PLUS expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . MINUS expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . TIMES expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . EQ expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . NEQ expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . GT expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . LT expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . GE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . LE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . AND expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . OR expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## fundec -> FUNCTION ID LPAREN tyfields RPAREN EQ expr . [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN tyfields RPAREN EQ expr
##

[E098]Unexpected token, expecting expression

prog: LET FUNCTION ID LPAREN RPAREN COLON WHILE
##
## Ends in an error in state: 132.
##
## fundec -> FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN tyfields RPAREN COLON
##

[E099]Unexpected token, expecting TYPE-ID

prog: LET FUNCTION ID LPAREN RPAREN COLON ID WHILE
##
## Ends in an error in state: 133.
##
## fundec -> FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN tyfields RPAREN COLON ID
##

[E100]Expecting function body

prog: LET FUNCTION ID LPAREN RPAREN COLON ID EQ VAR
##
## Ends in an error in state: 134.
##
## fundec -> FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . expr [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ
##

[E101]Expecting function body

prog: LET FUNCTION ID LPAREN RPAREN COLON ID EQ INT TO
##
## Ends in an error in state: 135.
##
## arith -> expr . PLUS expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . MINUS expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . TIMES expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . EQ expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . NEQ expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . GT expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . LT expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . GE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . LE expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . AND expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## compare -> expr . OR expr [ VAR TYPE TIMES PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ DIVIDE AND ]
## fundec -> FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ expr . [ VAR TYPE IN FUNCTION ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ expr
##

[E102]Expecting expression

prog: LPAREN INT END
##
## Ends in an error in state: 139.
##
## expr -> LPAREN exprs . RPAREN [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## exprs -> exprs . SEMICOLON expr [ SEMICOLON RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN exprs
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 124, spurious reduction of production exprs -> expr
##

[E103]Expecting RPAREN

prog: WHILE INT VAR
##
## Ends in an error in state: 142.
##
## arith -> expr . PLUS expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## arith -> expr . MINUS expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## arith -> expr . TIMES expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . EQ expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . NEQ expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . GT expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . LT expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . GE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . LE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . AND expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## compare -> expr . OR expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ DO DIVIDE AND ]
## expr -> WHILE expr . DO expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## WHILE expr
##

[E104]Expecting DO

prog: WHILE INT DO VAR
##
## Ends in an error in state: 143.
##
## expr -> WHILE expr DO . expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## WHILE expr DO
##

[E105]Expecting loop body

prog: WHILE INT DO INT WHILE
##
## Ends in an error in state: 144.
##
## arith -> expr . PLUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . MINUS expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . TIMES expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## arith -> expr . DIVIDE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . EQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . NEQ expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LT expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . GE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . LE expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . AND expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## compare -> expr . OR expr [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
## expr -> WHILE expr DO expr . [ VAR TYPE TO TIMES THEN SEMICOLON RPAREN RBRACK RBRACE PLUS OR NEQ MINUS LT LE IN GT GE FUNCTION EQ EOF END ELSE DO DIVIDE COMMA AND ]
##
## The known suffix of the stack is as follows:
## WHILE expr DO expr
##

[E106]Expecting expression

prog: INT VAR
##
## Ends in an error in state: 146.
##
## arith -> expr . PLUS expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## arith -> expr . MINUS expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## arith -> expr . TIMES expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## arith -> expr . DIVIDE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## compare -> expr . EQ expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## compare -> expr . NEQ expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## compare -> expr . GT expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## compare -> expr . LT expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## compare -> expr . GE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## compare -> expr . LE expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## compare -> expr . AND expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## compare -> expr . OR expr [ TIMES PLUS OR NEQ MINUS LT LE GT GE EQ EOF DIVIDE AND ]
## prog -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##

[E107]Unexpected token

